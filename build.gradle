buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://maven.parchmentmc.org' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.parchmentmc:librarian:1.+'
    }
}

plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.5.0'
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'kotlin'

version = '1.0'
group = 'com.github.zomb_676'
archivesBaseName = 'fantasySoup'

java.toolchain.languageVersion = JavaLanguageVersion.of(16)

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

repositories {
    maven { url = 'https://maven.parchmentmc.org' }
}


minecraft {
    // The mappings can be changed at any time and must be in the following format.
    // Channel:   Version:
    // snapshot   YYYYMMDD   Snapshot are built nightly.
    // stable     #          Stables are built at the discretion of the MCP team.
    // official   MCVersion  Official field/method names from Mojang mapping files
    //
    // You must be aware of the Mojang license when using the 'official' mappings.
    // See more information here: https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md
    //
    // Use non-default mappings at your own risk. They may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
//    mappings channel: 'official', version: '1.17.1'
    mappings channel: 'parchment', version: '2021.08.29-1.17.1'
    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg') // Currently, this location cannot be changed from the default.

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'examplemod', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

configurations {
    library
    implementation.extendsFrom library
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.17.1-37.0.51'

    library "org.jetbrains.kotlin:kotlin-stdlib:1.5.21"
    library group: 'org.jetbrains.kotlinx', name: 'kotlinx-coroutines-core', version: '1.5.1'
    library group: 'org.jetbrains.kotlin', name: 'kotlin-reflect', version: '1.5.21'
    library 'org.joml:joml:1.10.1'
    testImplementation group: 'junit', name: 'junit', version: '4.13.2'

    implementation platform("org.lwjgl:lwjgl-bom:$lwjglVersion")

    ['', '-opengl', '-glfw'].each {
        implementation "org.lwjgl:lwjgl$it:$lwjglVersion"
        implementation "org.lwjgl:lwjgl$it::natives-${getOs()}"
    }

    implementation "io.github.spair:imgui-java-binding:$imguiVersion"
    implementation "io.github.spair:imgui-java-lwjgl3:$imguiVersion"
    implementation "io.github.spair:imgui-java-natives-${getOs()}-ft:$imguiVersion"
}

def static getOs() {
    def osName = System.getProperty("os.name")
    if (osName.contains("Windows")) return "windows"
    else if (osName.contains("Linux")) return "linux"
    else if (osName.contains("MacOs")) return "macos"
    else throw new IllegalStateException("failed to analyze system from $osName")
}


jar {
    manifest {
        attributes([
                "Specification-Title"     : "examplemod",
                "Specification-Vendor"    : "examplemodsareus",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "examplemodsareus",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')

repositories {
    maven { url = "https://repo.spongepowered.org/repository/maven-public/" }
}
dependencies {
    library "org.spongepowered:mixin:0.8.4-SNAPSHOT"
    library "com.google.guava:guava:21.0"
    annotationProcessor "org.spongepowered:mixin:0.8.4-SNAPSHOT"
}
minecraft.runs.all {
    lazyToken('minecraft_classpath') {
        configurations.library.copyRecursive().resolve().collect { it.absolutePath }.join(File.pathSeparator)
    }
}
afterEvaluate {
    def reobfTsrgFile = file("${tasks.reobfJar.temporaryDir}/mixins.tsrg")
    def refMapFile = file("${tasks.compileJava.temporaryDir}/mixins.examplemod.refmap.json")
    configurations.compileClasspath.resolvedConfiguration.firstLevelModuleDependencies.each { dep ->
        dependencies.annotationProcessor([group: dep.moduleGroup, name: dep.moduleName, version: dep.moduleVersion])
    }
    tasks.compileJava {
        options.compilerArgs += [
                "-AreobfTsrgFile=${buildDir.canonicalPath}/createMcpToSrg/output.tsrg",
                "-AoutTsrgFile=${reobfTsrgFile.canonicalPath}",
                "-AoutRefMapFile=${refMapFile.canonicalPath}",
                "-AmappingTypes=tsrg"
        ]
        dependsOn("createMcpToSrg")
        doFirst {
            reobfTsrgFile.delete()
            refMapFile.delete()
        }
    }
    tasks.jar.from refMapFile
    tasks.reobfJar {
        mappings = reobfTsrgFile
    }
}

tasks.withType(JavaCompile){
    options.encoding = "UTF-8"
}