//buildscript {
//    repositories {
////        maven{ url = 'https://sizableshrimp.me/maven'}
//        maven { url = 'https://maven.minecraftforge.net/' }
//        mavenCentral()
////        maven {
////            name "Sponge"
////            url "https://repo.spongepowered.org/repository/maven-public/"
////            content { includeGroup "org.spongepowered" }
////        }
//    }
//    dependencies {
////        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
////        classpath group: 'me.sizableshrimp.parchmenttest', name: 'ForgeGradle', version: '5.1.+', changing: true
////        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
//    }
//}

plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.5.0'
    id 'com.github.johnrengelman.shadow' version "5.2.0"
    id 'dev.architectury.loom' version '0.7.4-SNAPSHOT'
}

apply plugin: 'kotlin'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
//apply plugin: 'net.minecraftforge.gradle'
//apply plugin: 'org.spongepowered.mixin'

//mixin {
//    add sourceSets.main, "fantasy_soup.refmap.json"
//}

group = 'com.github.zomb_676'
version = '1.0'
archivesBaseName = 'fantasySoup'

java.toolchain.languageVersion = JavaLanguageVersion.of(16)

compileKotlin {
    kotlinOptions.jvmTarget = "16"
}

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
//minecraft {
//    mappings channel: 'snapshot', version: '20210309-1.16.5'
//    mappings channel: 'official', version: '1.17.1'
//    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

//    runs {
//        client {
//            workingDirectory project.file('run')
//            property 'forge.logging.markers', 'REGISTRIES'
//            property 'forge.logging.console.level', 'debug'
//            mods {
//                fantasy_soup {
//                    source sourceSets.main
//                }
//            }
//        }
//
//        server {
//            workingDirectory project.file('run')
//            property 'forge.logging.markers', 'REGISTRIES'
//            property 'forge.logging.console.level', 'debug'
//            mods {
//                fantasy_soup {
//                    source sourceSets.main
//                }
//            }
//        }
//
//        data {
//            workingDirectory project.file('run')
//            property 'forge.logging.markers', 'REGISTRIES'
//            property 'forge.logging.console.level', 'debug'
//            args '--mod', 'fantasy_soup', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
//
//            mods {
//                fantasy_soup {
//                    source sourceSets.main
//                }
//            }
//        }
//    }
//}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.k-4u.nl"
    }

}

configurations{
    library
    implementation.extendsFrom library
}

dependencies {
//    minecraft 'net.minecraftforge:forge:${project.minecraft_version}-${project.forge_version}-'
//    annotationProcessor 'org.spongepowered:mixin:0.8.2:processor'
    mappings minecraft.officialMojangMappings()
    forge "net.minecraftforge:forge:${project.minecraft_version}-${project.forge_version}"
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    forgeDependencies  "org.jetbrains.kotlin:kotlin-stdlib:1.5.21"
    forgeDependencies  group: 'org.jetbrains.kotlinx', name: 'kotlinx-coroutines-core', version: '1.5.1'
    forgeDependencies  group: 'org.jetbrains.kotlin', name: 'kotlin-reflect', version: '1.5.21'
    testImplementation group: 'junit', name: 'junit', version: '4.13.2'
}

//runs.all{
//    lazyToken("minecraft_classpath"){
//        configurations.library.copyRecursive().resolve().collect{it.absolutePath}.join(File.pathSeparator)
//    }
//}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier "sources"
    exclude "**/*.psd"
    exclude "**/*.bbmodel"
    exclude "**/*.md"
    from sourceSets.main.allSource
}

task deobfJar(type: Jar) {
    classifier "deobf"
    exclude "**/*.psd"
    exclude "**/*.bbmodel"
    exclude "**/*.md"
    from(sourceSets.main.output)
}

//jar {
//    exclude "**/*.psd"
//    exclude "**/*.bbmodel"
//    exclude "**/*.md"
//    manifest {
//        attributes([
//                "Specification-Title"     : "fantasySoup",
//                "Specification-Vendor"    : "zomb_676",
//                "Specification-Version"   : "1", // We are version 1 of ourselves
//                "Implementation-Title"    : project.name,
//                "Implementation-Version"  : "${getArchiveVersion().get()}",
//                "Implementation-Vendor"   : "zomb_676",
//                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
//                'FMLAT'                   : 'accesstransformer.cfg',
////                "MixinConnector"          : "com.github.zomb_676.fantasySoup.mixin.MixinConnector"
//        ])
//    }
//}

//reobf {
//    shadowJar {}
//}
shadowJar {
    exclude "**/*.psd"
    exclude "**/*.bbmodel"
    exclude "**/*.md"
    archiveClassifier.set('')
    dependencies {
        include(dependency("org.jetbrains.kotlin:kotlin-stdlib"))
        include(dependency("org.jetbrains.kotlinx:kotlinx-coroutines-core"))
    }
}

publishing{
    publications {
        mavenJava(MavenPublication) {
            artifact sourcesJar
            artifact deobfJar
            pom{
                name = "fantasySoup"
                description = "my library mod"
            }
        }
    }
    repositories {
        maven {
            url "http://ruaruarua.ddns.net:1011/artifactory/fantasySoup"
            credentials {
                username System.getenv("ARTIFACTORY_USERNAME")
                password System.getenv("ARTIFACTORY_PASSWORD")
            }
        }
    }
}